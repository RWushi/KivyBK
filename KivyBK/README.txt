**Описание проекта**
    RApp- это кроссплатформенное приложение, внешний вид оптимизирован под все платформы. Однако
весь функционал, связанный с получением данных устройства работает только на android.
Оно представляет из себя четыре кнопки, из которых полностью работают только 2.


**Общая информация**
    Проект поделен на 2 части: Backend в директории Backend и Frontend в корне проекта. У
каждой части есть свой файл requirements.txt и .venv. Вся логика, связанная с базой данных
происходит на стороне сервера, а не клиента, взаимодействие между ними осуществляется
посредством RESTful API. Чувствительные данные помещены в .env. Сервер работает локально
и я использую ngrok для получения временного публичного IP, чтобы отправлять запросы
на сервер, нужно поменять значение переменной SERVER_URL в модуле SendServer.py.Весь GUI и
поведение виджетов реализованы к файле myapp.kv, а все что связано с дополнительным
интерфейсом- в директории Design. Точка входа в приложение- main.py. Готовый .apk файл
находится в папке bin.


**Кнопки**
1) "Отправить геолокацию"- нажмите на эту кнопку, чтобы поделиться своим местоположением
с приложением. Программа сначала запросит разрешение на использование Ваших данных, и если
у Вас включены службы локации, то приложение получит координаты и сохранит в БД. Если
служба отключена, то Вы будете перенаправлены в настройки для того, чтобы ее включить.
Сначала RApp пытается получить местоположение с использованием GPS_PROVIDER и если сделать
это не удается, то данные извлекаются с помощью NETWORK_PROVIDER. Есть подробный вывод
в консоль на каждом этапе, благодаря которому видно что и как происходит.

2) "Начать гео-трансляцию"- та же самая механика, что и у предыдущей кнопки. Различие в
том что данные о местоположении обновляются каждые 30 секунд.

3) "Сделать фото"- функционал этой кнопки реализован не до конца. Приложение запрашивает
разрешение об использовании данных с камеры пользователя и на редактирование хранилища.
При попытке обработать фото возникает исключение "jnius.jnius.JavaException: JVM exception
occurred: Couldn't find meta-data for provider with authority com.myapp.fileprovider
java.lang.IllegalArgumentException", которая и помешала полной реализации этого функционала.
Я использовал самый безопасный и рекомендованный способ для получения фотографий с
камеры пользователя- FileProvider, на сегодняшний день это самый распространенный способ.
Чтобы его использовать были внесены изменения в конфигурационный файл buildozer.spec.
Был создан файл в корневой директории проекта- AndroidManifest.xml и к нему прилагается
ресурсный файл res/xml/provider_paths.xml. Сам код можно увидеть в ButtonsFunctions/
Camera.py.

4) "Выбрать фото из галереи"- эта кнопка полностью нерабочая, несмотря на то, что реализовать
ее работу явно легче, чем работу предыдущей.

Примечание: в работе всех кнопок не использовалась библиотека Plyer, как было запланировано.
Я использовал более низкоуровневые методы, которые дают больше возможностей.


**Впечатления**
    Это был мой первый проект с использованием Kivy. Я давно хотел что-нибудь на нем написать
и вот, наконец, выпала такая возможность. Я старался использовать самые стандартные методы
в работе с приложением, потому, что часто такое бывает, что при изучении новых инструментов
мы пользуемся теми методами, которыми никто не пользуется и они оказываются неэффективными.
В принципе мне он понравился, несмотря на явные недостатки этого фреймворка.